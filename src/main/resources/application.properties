#SpringBoot主配置文件,优先级：application.properties > application.yml
#项目内不同路径下配置文件优先级，由高到低
#1、file(文件路径）:项目根目录/config
#2、file:项目根目录
#3、classpath(类路径):项目根目录/config
#4、classpath:项目根目录(当前情况)

#使用外部配置文件，优先级外部配置文件 > 内部配置文件
#在IDEA-运行-编辑配置-程序参数- --spring.config.location=""  或-虚拟机选项- -Dspring.config.location="" 双引号中指定使用的外部配置文件路径
#通过cmd命令-java jar运行jar(war)包时也可以指定参数--spring.config.location=""

#单独（命令行）外部给出配置参数，优先级 命令行参数 > 外部配置文件 > 内部配置文件
#直接在程序参数(--)/虚拟机选项(-D)/cmd命令中给出参数，多个参数通过空格分割


#设置内置tomcat服务器端口，默认8080
server.port=8080
#设置项目路径名，注意添加/
server.servlet.context-path=/SpringBootDemo


#指定使用的开发环境配置，命名格式为application-环境名.properties，使用时直接指定环境名
#spring.profiles.active=dev
#动态指定环境
#1也可以在IDEA-运行-编辑配置-Active Profiles指定要使用的环境名
#2还可以在IDEA-运行-编辑配置-Environment-虚拟机选项- -Dspring.profiles.active=环境名 来指定环境
#3可以通过maven打包(package)后在target目录执行cmd指令java -jar 全包名 --spring.profiles.active=环境名 来指定环境


#HTTP Request和Response的编码，默认UTF-8
#spring.http.encoding.charset=UTF-8

#调试模式，会在运行日志上打印开启的自动配置(Positive matches),提供但未开启的自动配置(Negative matches)
#debug=true


#SpringBoot默认支持的是slf4j和logback日志实现
#配置日志级别(默认为INFO)，通过logging.level.主配置类所在全包名=TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF(级别由左到右递增)
logging.level.priv.howard.SpringBootDemo=DEBUG

#配置日志输出文件，通过logging.file.name=生成日志路径/日志文件名或logging.file.path=生成日志文件路径(默认为spring.log)，两者都指定只有logging.file.name生效
#注意：路径默认为绝对路径，如果要相对项目路径则在路径名前添加./
logging.file.name=./logs/spring.log
#logging.file.path=./logs

#配置日志输出格式，logging.pattern.console配置控制台输出格式，logging.pattern.file配置日志文件输出格式
#%d{日期格式}，[%thread]线程名，%-5level5个字符宽度显示级别 %logger{日志logger全类名长度} %msg日志内容 %n回车
logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger{100} - %msg%n
logging.pattern.file=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger{100} == %msg%n


#指定
#配置对象的属性
#student.name=john
#student.age=22

#可以通过随机占位符来指定随机数属性
#随机字符串
#student.name=${random.value}
#随机整数
#student.age=${random.int}
#随机uuid:${random.uuid}
#随机long型整数:${random.long}
#随机n以内整数:${random.int(n)}
#随机a到b内的整数${random.int[a,b]}

#该值被application.yml所引用
studentAge = 233
